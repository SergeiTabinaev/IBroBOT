from ibapi.client import EClient
from ibapi.wrapper import EWrapper
# import threading
# import time
from ibapi.contract import Contract
from ibapi.order import *
from threading import Timer


#orders/basic orders / stop limit
#               order = Order()
#               order.action = action
#               order.orderType = "STP LMT"
#               order.totalQuantity = quantity
#               order.lmtPrice = limitPrice
#               order.auxPrice = stopPrice

#Order Management/ Placing Orders
#                  / Modifying Orders
#                 /  Cancelling Orders


# возможно ч-з фласк @app.route в телеграмме в веб хуками
# написать ф-ю выбор contracta (1, 2 или 3)
# получить цену?????????
# написать ф-ю выбор ордера (купить продать)
# в place order вписать данные ф-и
    # ввод ф-и реализовать в другом файле



class TestApp(EWrapper, EClient):
    def __init__(self):
        EClient.__init__(self, self)

    def error(self, reqId, errorCode, errorString):
        print("Error: ", reqId, " ", errorCode, " ", errorString)

    def nextValidId(self, orderId:int):
        self.nextOrderId = orderId
        self.start()

    def orderStatus(self, orderId, status, filled,
                    remaining, avgFillPrice, permId,
                    parentId, lastFillPrice, clientId,
                    whyHeld, mktCapPrice):
        print('OrderStatus. Id:', orderId, ', Status: ', status, ', Filled', filled,
                    ', Remaining', remaining, ', LastFillPrice', lastFillPrice)

    def openOrder(self, orderId, contract, order,
                  orderState):
        print('OpenOrder. ID:', orderId, contract.symbol, contract.secType, '@', contract.exchange, ':',
              order.action, order.orderType, order.totalQuantity,
                  orderState.status)

    def execDetails(self, reqId, contract, execution):
        print('ExecDetails. ', reqId, contract.symbol, contract.secType, contract.currency,
              execution.execId, execution.orderId, execution.shares, execution.lastLiquidity)

    def start(self):
        contract1 = Contract()
        # contract2 = Contract()
        # contract3 = Contract()

        contract1.symbol = "EUR"  # Контракт на валютную пару EUR.GBP
        contract1.secType = "CASH"
        contract1.currency = "USD"
        contract1.exchange = "IDEALPRO"

        # contract2.symbol = "GBP"  # Контракт на акцию Interactive Brokers
        # contract2.secType = "CASH"
        # contract2.currency = "USD"
        # contract2.exchange = "IDEALPRO"
        #
        # contract3.symbol = "AUD"  # Контракт на акцию Interactive Brokers
        # contract3.secType = "CASH"
        # contract3.currency = "USD"
        # contract3.exchange = "IDEALPRO"

        order1 = Order()
        order1.action = 'BUY'
        order1.totalQuantity = 20000 #?????????
        order1.orderType = "LMT"
        order1.lmtPrice = 1.18285 #??????????

        self.placeOrder(self.nextOrderId, contract1, order1)

    def stop(self):
        self.done = True
        self.disconnect()


def main():
    app = TestApp()
    app.nextOrderId = 0
    app.connect('127.0.0.1', 7497, 100)

    #call stop() after 3sec. to disconnect
    Timer(3, app.stop).start()
    app.run()


if __name__ == '__main__':
    main()


























#
# =====================================================================================
#
# import ibapi.wrapper
# import ibapi.client
# import ibapi.contract  # Contract - интересующий сейчас класс
# import threading
# import time  # модуль времени из стандартной библ-ки Python
#
#
# # Класс-наследник EWrapper
# class MyWrapper(ibapi.wrapper.EWrapper):
#     # Добавлен инициализатор объекта
#     def __init__(self):
#         self.nvid = 0  # переменная для next valid order id
#         self.con_detail_recive = False  # Флаг для полученного контракта
#
#     # Переписан базовый метод .nextValidId()
#     def nextValidId(self, orderId: int):
#         super().nextValidId(orderId)
#         self.nvid = orderId  # записываем значение next valid order id
#
#     # Метод, который принимает ответ на запрос деталей контракта
#     def contractDetails(self, reqId: int, contractDetails: ibapi.contract.ContractDetails):
#         # Выводим все параметры объекта и их значения
#         for arg in dir(contractDetails):  # Обходим все атрибуты объекта contractDetails
#             if not arg.startswith('_'):  # Исключаем приватные атрибуты
#                 val = getattr(contractDetails, arg)  # Значение конкретного атрибута
#                 print("{} = {}".format(arg, val))  # Печатаем атрибут и его значение
#
#     # Метод, завершающий прием ответа на запрос деталей контракта
#     def contractDetailsEnd(self, reqId: int):
#         self.con_detail_recive = True
#         print("Закончили принимать параметры контракта")  # Печатаем статус
#
#
# # Создаем необходимые объекты
# tws = ibapi.client.EClient(MyWrapper())  # Объект класса Eclient
# cnt = ibapi.contract.Contract()  # Объект класса Contract
#
# # Контракт на валютную пару EUR.USD
# cnt.symbol = "EUR"
# cnt.secType = "CASH"
# cnt.currency = "USD"
# cnt.exchange = "IDEALPRO"
#
# tws.connect("127.0.0.1", 7497, 100)  # подключаемся к терминалу
#
# if tws.isConnected():  # В случе успешного подключения к TWS
#     th = threading.Thread(target=tws.run)  # Организовываем поток
#     th.start()  # Запускаем потоки
#
#     while tws.wrapper.nvid == 0:  # Пока TWS не прислал Next Valid ID
#         time.sleep(.5)  # Спим полсекунды
#
#     tws.reqContractDetails(tws.wrapper.nvid, cnt)  # Запрашиваем все необходимые данные по контракту
#     while not tws.wrapper.con_detail_recive:  # Ждем получение ...
#         time.sleep(.2)  # ... деталей контракта
#
#     tws.done = True  # Переводим флаг отключения
#     while tws.done:  # Ждем пока произойдет ...
#         time.sleep(.2)  # ... отключение от TWS
#
#     print("----- !!!THE END!!! -----")
#
#
# ==========================================================================================
#
# # # Класс-наследник EWrapper
# # class MyWrapper(EWrapper):
# #     # Добавлен инициализатор объекта
# #     def __init__(self):
# #         self.nvid = 0  # Будем записывать Next Valid Identifier
# #         self.end_work_with_TWS = False  # "Флаг" для отключения от TWS
# #
# #     # Переписан базовый метод .error()
# #     def error(self, reqId: int, errorCode: int, errorString: str):
# #         if reqId != -1:  # Если это не ошибка из служебной информации при подключении
# #             print(f"[{reqId}] код: {errorCode} || {errorString}")  # Печатаем ее
# #
# #     # Переписан базовый метод .connectAck()
# #     def connectAck(self):
# #         print("connectAck(): подключение установлено")  # "Принтуем", что метод сработал
# #
# #     # Переписан базовый метод .nextValidId()
# #     def nextValidId(self, orderId: int):
# #         self.nvid = orderId  # Сохраняем Next Valid ID в собственный атрибут
# #         print("nextValidId(): новый ID = {}".format(self.nvid))  # "Принтуем", что метод сработал
# #
# #     # Переписан базовый метод .connectionClosed()
# #     def connectionClosed(self):
# #         print("connectionClosed(): отключились от терминала")  # "Принтуем", что метод сработал
# #         self.end_work_with_TWS = True  # Устанавливаем собственный флаг отключения от терминала
# #
# #
# # # Запускаем работу с Trader Workstation
# # tws = EClient(
# #     MyWrapper())  # Инициализируем EClient, объект класса EWrapper создаем "на лету", в момент передачи в EClient.
# # tws.connect("127.0.0.1", 7497, 100)  # Подключаемся к терминалу
# #
# # # Работаем в случае успешного подключения к терминалу
# # if tws.isConnected():
# #     # Организовываем очередь для метода .run()
# #     th = threading.Thread(target=tws.run)  # Инициализируем очередь
# #     th.start()  # Запускаем очередь
# #
# #     # Сейчас засыпаем, дав терминалу время поработать
# #     print("Основной поток засыпает на 10 секунд.")  # "Принтуем", что сейчас будем спать
# #     time.sleep(10)  # Спим 10 секунд
# #
# #     # А теперь отключаемся от терминала
# #     tws.done = True  # Переключаем внутренний флаг в EClient
# #     while tws.done and not tws.wrapper.end_work_with_TWS:  # Ждем в бесконечном цикле, пока флаги не примут нужные значения
# #         print("Жду отключения от терминала")  # "Принтуем", что ждем
# #         time.sleep(.5)
#
#
# ===============================================================================
#
#
#
#
#
#     # wrp = EWrapper()
# # cln = EClient(wrp)
# # cln.connect("127.0.0.1", 7497, 100)
# #
# # if cln.isConnected():
# #     print("Успешно подключились к TWS")
# #     cln.th = threading.Thread(target=cln.run)
# #     cln.th.start()
# #     cln.th.join(timeout=5)
# #
# #
# # cln.disconnect()

# def tickByTickBidAsk(self, reqId: int, time: int, bidPrice: float, askPrice: float,
    #                           bidSize: int, askSize: int, tickAttribBidAsk):
    #     super().tickByTickBidAsk(reqId, time, bidPrice, askPrice, bidSize,
    #             askSize, tickAttribBidAsk)
    #     print("BidAsk. ReqId:", reqId,
    #             "Time:", datetime.datetime.fromtimestamp(time).strftime("%Y%m%d %H:%M:%S"),
    #             "BidPrice:", bidPrice, "AskPrice:", askPrice, "BidSize:", bidSize,
    #             "AskSize:", askSize, "BidPastLow:", tickAttribBidAsk.bidPastLow, "AskPastHigh:", tickAttribBidAsk.askPastHigh)


 # def tickSize(self, reqId, tickType, size):
    #     print("Tick Size. Ticker Id:", reqId, "tickType:", str(tickType), "Size:", size)




 from ibapi.client import EClient
from ibapi.wrapper import EWrapper
from ibapi.contract import Contract as IBcontract
from threading import Thread
import queue
import pandas as pd
from ibapi.ticktype import TickTypeEnum`

`DEFAULT_PRICE_DATA_ID = 1001`

`FINISHED = object()
STARTED = object()
TIME_OUT = object()`

class finishableQueue(object):

    def __init__(self, queue_to_finish):

        self._queue = queue_to_finish
        self.status = STARTED

    def get(self, timeout):

        contents_of_queue=[]
        finished=False

        while not finished:
            try:
                current_element = self._queue.get(timeout=timeout)
                if current_element is FINISHED:
                    finished = True
                    self.status = FINISHED
                else:
                    contents_of_queue.append(current_element)

            except queue.Empty:
                finished = True
                self.status = TIME_OUT

        return contents_of_queue

    def timed_out(self):
        return self.status is TIME_OUT


class TestWrapper(EWrapper):

    def __init__(self):
        self._my_price_data_dict = {}

    def get_error(self, timeout=5):
        if self.is_error():
            try:
                return self._my_errors.get(timeout=timeout)
            except queue.Empty:
                return None

        return None

    def is_error(self):
        an_error_if=not self._my_errors.empty()
        return an_error_if

    def init_error(self):
        error_queue=queue.Queue()
        self._my_errors = error_queue

    def error(self, id, errorCode, errorString):
        ## Overriden method
        errormsg = "IB error id %d errorcode %d string %s" % (id, errorCode, errorString)
        self._my_errors.put(errormsg)

    def init_ibprices(self, tickerid):
        ibprice_data_queue = self._my_price_data_dict[tickerid] = queue.Queue()

        return ibprice_data_queue

    def tickPrice(self, reqId, tickType, price, attrib):
        tickdata = (TickTypeEnum.to_str(tickType), price)

        price_data_dict = self._my_price_data_dict

        if reqId not in price_data_dict.keys():
            self.init_ibprices(reqId)

        price_data_dict[reqId].put(tickdata)


class TestClient(EClient):

    def __init__(self, wrapper):
        EClient.__init__(self, wrapper)

    def error(self, reqId, errorCode, errorString):
        print("Error: ", reqId, " ", errorCode, " ", errorString)

    def getIBrealtimedata(self, ibcontract, tickerid=DEFAULT_PRICE_DATA_ID):
        ib_data_queue = finishableQueue(self.init_ibprices(tickerid))

        self.reqMktData(
            tickerid,
            ibcontract,
            "",
            False,
            False,
            []
        )

        MAX_WAIT_SECONDS = 5
        print("Getting data from the server... could take %d seconds to complete " % MAX_WAIT_SECONDS)

        price_data = ib_data_queue.get(timeout = MAX_WAIT_SECONDS)

        while self.wrapper.is_error():
            print(self.get_error())

        if ib_data_queue.timed_out():
            print("Exceeded maximum wait for wrapper to confirm finished - seems to be normal behaviour")

        self.cancelMktData(tickerid)

        return price_data

class TestApp(TestWrapper, TestClient):
    def __init__(self, ipaddress, portid, clientid):
        TestWrapper.__init__(self)
        TestClient.__init__(self, wrapper=self)

        self.connect(ipaddress, portid, clientid)

        thread = Thread(target = self.run)
        thread.start()

        setattr(self, "_thread", thread)

        self.init_error()

def main(slist):

    app = TestApp("127.0.0.1", 7497, 1)

    for i in slist:
        ibcontract = IBcontract()
        ibcontract.secType = "STK"
        ibcontract.symbol = i
        ibcontract.exchange ="SEHK"

        Lastprice = app.getIBrealtimedata(ibcontract)

        df = pd.DataFrame(Lastprice)
        print(ibcontract.symbol, df.head())

    app.disconnect()

if __name__ == "__main__":

    seclist = [700,2318,5,12]
    main(seclist)


  connection.py
    def recvMsg(self):
if not self.isConnected():
logger.debug("recvMsg attempted while not connected, releasing lock")
return b""
try:
buf = self._recvAllMsg()
# receiving 0 bytes outside a timeout means the connection is either
# closed or broken
if len(buf) == 0:
logger.debug("socket either closed or broken, disconnecting")
self.disconnect()
except socket.timeout:
logger.debug("socket timeout from recvMsg %s", sys.exc_info())
buf = b""
except socket.error:
logger.debug("socket broken, disconnecting")
self.disconnect()
buf = b""
else:
pass



   mkt = OrderSamples.MarketOrder("BUY", 100)
             # Order will become active if conditioning criteria is met
             mkt.conditions.append(
                 OrderSamples.PriceCondition(PriceCondition.TriggerMethodEnum.Default,
                                             208813720, "SMART", 600, False, False))
             mkt.conditions.append(OrderSamples.ExecutionCondition("EUR.USD", "CASH", "IDEALPRO", True))
             mkt.conditions.append(OrderSamples.MarginCondition(30, True, False))
             mkt.conditions.append(OrderSamples.PercentageChangeCondition(15.0, 208813720, "SMART", True, True))
             mkt.conditions.append(OrderSamples.TimeCondition("20160118 23:59:59", True, False))
            mkt.conditions.append(OrderSamples.VolumeCondition(208813720, "SMART", False, 100, True))
            self.placeOrder(self.nextOrderId(), ContractSamples.EuropeanStock(), mkt)

timeCondition = order_condition.Create(OrderCondition.Time)
             #Before or after...
             timeCondition.isMore = isMore
             #this time..
             timeCondition.time = time
             #AND | OR next condition (will be ignored if no more conditions are added)
             timeCondition.isConjunctionConnection = isConjunction